#ifndef SAMPLE_H
#define SAMPLE_H

#include <vector>
#include <random>
#include <array>
#include <cmath>

#include "../layer/layer.hpp"
#include "../material/material.hpp"
#include "../random/random.hpp"

/*
    All four layers require g, mu_a, mu_s values

    The first 3 layers are additionally specified by height
*/

struct LayerParameterValues {
    double n;
    double g;
    double mu_a;
    double mu_s;
    double height;
};

Layer sim_random_parameter_values(LayerParameterValues lower, LayerParameterValues upper, bool infinite, Random);

const size_t numLayers = 3;
const LayerParameterValues layerParameterRanges[numLayers][2] = {
    { LayerParameterValues{1.4, 0.9, 0.0015,   1,      5},     LayerParameterValues{1.4, 0.9, 0.28,    100,    15} },
    { LayerParameterValues{1.4, 0.9, 0,        0.2,    1},     LayerParameterValues{1.4, 0.9, 0,       0.2,    5} }, // csf broadly fixed layer
    { LayerParameterValues{1.4, 0.9, 0.0015, 1},     LayerParameterValues{1.4, 0.9, 1, 100} } // semi-infinite
};

Material sampleMaterial(Random, double nAir = 1);

const std::array<double, 81> waterExtinction{
    0.00023718, 0.00023736, 0.00023917, 0.00023664, 0.00023538,
    0.00023394, 0.00023574, 0.00023538, 0.00023249, 0.00023267,
    0.00023014, 0.00022762, 0.00022581, 0.00022545, 0.00022148,
    0.00021986, 0.00021679, 0.00021354, 0.00021119, 0.0002074 ,
    0.00020614, 0.0002018 , 0.00019838, 0.0001935 , 0.00019152,
    0.000187  , 0.00018448, 0.00018141, 0.00017581, 0.00017401,
    0.00017256, 0.00016895, 0.00016877, 0.00016751, 0.00016769,
    0.00017004, 0.00017292, 0.00017401, 0.0001796 , 0.0001843 ,
    0.00018899, 0.00019134, 0.00020271, 0.00021986, 0.00024061,
    0.00026336, 0.00028628, 0.00029892, 0.00031408, 0.00031733,
    0.00032401, 0.00032581, 0.00032888, 0.00033357, 0.00033989,
    0.00034531, 0.00034946, 0.00034837, 0.00035361, 0.00035541,
    0.00035758, 0.00036137, 0.00036029, 0.0003648 , 0.00036895,
    0.00038051, 0.00038105, 0.00038989, 0.00039242, 0.00040361,
    0.00041191, 0.00042509, 0.00043556, 0.00043989, 0.0004417 ,
    0.00046787, 0.00046444, 0.00046968, 0.00047473, 0.00049458,
    0.00051588
};

const std::array<double, 81> oxyExtinction{
    491.84,  503.04,  514.55,  525.76,  537.48,  549.34,  561.15,
    572.96,  585.47,  597.24,  609.45,  621.74,  634.33,  646.75,
    659.43,  671.81,  684.71,  697.22,  709.94,  722.71,  735.83,
    748.29,  761.1 ,  774.09,  787.2 ,  800.32,  813.17,  826.2 ,
    838.97,  852.17,  865.07,  877.8 ,  890.69,  903.55,  916.19,
    928.87,  941.38,  953.67,  966.35,  978.64,  990.84, 1002.96,
    1015.03, 1027.02, 1039.05, 1050.43, 1061.85, 1073.62, 1084.82,
    1095.94, 1106.93, 1117.92, 1128.3 , 1138.81, 1149.1 , 1159.31,
    1169.12, 1178.72, 1188.19, 1197.7 , 1206.77, 1215.29, 1224.19,
    1232.18, 1240.39, 1248.68, 1256.2 , 1263.8 , 1270.66, 1277.78,
    1284.25, 1290.38, 1296.76, 1302.36, 1308.05, 1313.35, 1318.56,
    1323.16, 1327.94, 1331.98, 1336.15
};

const std::array<double, 81> deoxyExtinction{
    1340.75, 1369.33, 1407.46, 1449.72, 1496.71, 1545.39, 1593.38,
    1634.16, 1664.17, 1681.59, 1674.07, 1656.18, 1611.71, 1557.81,
    1493.1 , 1422.53, 1350.96, 1282.17, 1217.2 , 1156.31, 1104.71,
    1056.81, 1017.03,  981.94,  951.28,  926.18,  903.16,  884.18,
    867.37,  852.17,  839.66,  828.29,  818.78,  810.91,  803.79,
    798.49,  793.89,  790.2 ,  787.2 ,  784.68,  783.21,  781.99,
    780.99,  780.6 ,  780.3 ,  780.21,  780.21,  780.3 ,  780.38,
    780.69,  781.3 ,  781.82,  782.51,  783.68,  784.81,  785.9 ,
    787.81,  789.89,  792.11,  794.72,  797.49,  800.71,  804.18,
    808.  ,  812.  ,  816.39,  821.08,  825.9 ,  830.81,  835.89,
    840.97,  846.09,  851.39,  856.6 ,  861.77,  866.76,  871.59,
    876.28,  880.49,  884.35,  887.78
};

const std::array<double, 81> lipidExtinction{
    0.00654, 0.00707, 0.00768, 0.00837, 0.00908, 0.00972, 0.0103 ,
    0.01089, 0.01155, 0.01227, 0.01278, 0.0129 , 0.01249, 0.01153,
    0.01021, 0.00871, 0.00719, 0.00596, 0.00515, 0.00451, 0.00409,
    0.00378, 0.0036 , 0.00355, 0.00349, 0.00346, 0.00347, 0.00352,
    0.00369, 0.00387, 0.00403, 0.00424, 0.00442, 0.00467, 0.00497,
    0.00527, 0.00567, 0.00594, 0.00615, 0.00654, 0.00691, 0.00724,
    0.00758, 0.00786, 0.00799, 0.00803, 0.00801, 0.00785, 0.00764,
    0.00751, 0.00726, 0.00703, 0.00685, 0.00669, 0.00651, 0.00637,
    0.00632, 0.00633, 0.00647, 0.00662, 0.00674, 0.0069 , 0.00724,
    0.00786, 0.0086 , 0.00938, 0.01022, 0.01133, 0.01264, 0.0143 ,
    0.01636, 0.01867, 0.02121, 0.02414, 0.02754, 0.03116, 0.03491,
    0.03833, 0.04121, 0.04384, 0.04633
};

const std::array<double, 81> wavelengths{
    740, 742, 744, 746, 748, 750, 752, 754, 756, 758, 760, 762, 764,
    766, 768, 770, 772, 774, 776, 778, 780, 782, 784, 786, 788, 790,
    792, 794, 796, 798, 800, 802, 804, 806, 808, 810, 812, 814, 816,
    818, 820, 822, 824, 826, 828, 830, 832, 834, 836, 838, 840, 842,
    844, 846, 848, 850, 852, 854, 856, 858, 860, 862, 864, 866, 868,
    870, 872, 874, 876, 878, 880, 882, 884, 886, 888, 890, 892, 894,
    896, 898, 900
};

std::vector<Material> sampleParameterMaterials(Random, double nAir = 1);

#endif